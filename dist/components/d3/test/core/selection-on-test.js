require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("selection.on");suite.addBatch({"select(body)":{topic:function(){return d3.select("body").html("")},"registers an event listener for the specified type":function(e){var t=e.append("form"),n=0;t.on("submit",function(){++n}),t.append("input").attr("type","submit").node().click(),assert.equal(n,1)},"replaces an existing event listener for the same type":function(e){var t=e.append("form"),n=0,r=0;t.on("submit",function(){++r}),t.on("submit",function(){++n}),t.append("input").attr("type","submit").node().click(),assert.equal(n,1),assert.equal(r,0)},"removes an existing event listener":function(e){var t=e.append("form"),n=0;t.on("submit",function(){++n}),t.on("submit",null),t.append("input").attr("type","submit").node().click(),assert.equal(n,0),assert.isUndefined(t.on("submit"))},"ignores removal of non-matching event listener":function(e){e.append("form").on("submit",null)},"observes the specified namespace":function(e){var t=e.append("form"),n=0,r=0;t.on("submit.foo",function(){++n}),t.on({"submit.bar":function(){++r}}),t.append("input").attr("type","submit").node().click(),assert.equal(n,1),assert.equal(r,1)},"can register listeners as a map":function(e){var t=e.append("form"),n=0,r=0;t.on({submit:function(){++r}}),t.on({submit:function(){++n}}),t.append("input").attr("type","submit").node().click(),assert.equal(n,1),assert.equal(r,0),t.on({submit:null}),assert.isUndefined(t.on("submit"))},"passes the current data and index to the event listener":function(e){var t=e.html("").selectAll("form").data(["a","b"]).enter().append("form"),n,r,i=new Object;t.on("submit",function(e,t){n=e,r=t}),t.append("input").attr("type","submit")[0][1].click(),assert.equal(n,"b"),assert.equal(r,1),t[0][1].__data__=i,t.append("input").attr("type","submit")[0][1].click(),assert.equal(n,i),assert.equal(r,1)},"uses the current element as the context":function(e){var t=e.html("").selectAll("form").data(["a","b"]).enter().append("form"),n;t.on("submit",function(){n=this}),t.append("input").attr("type","submit")[0][1].click(),assert.domEqual(n,t[0][1])},"sets the current event as d3.event":function(e){var t=e.append("form"),n;t.on("submit",function(){n=d3.event}),t.append("input").attr("type","submit").node().click(),assert.equal(n.type,"submit"),assert.domEqual(n.target,t[0][0])},"restores the original event after notifying listeners":function(e){var t=e.append("form"),n=d3.event=new Object;t.on("submit",function(){}),t.append("input").attr("type","submit").node().click(),assert.equal(d3.event,n)},"returns the current selection":function(e){assert.isTrue(e.on("submit",function(){})===e)},"returns the assigned listener if called with one argument":function(e){function t(){}e.on("mouseover",t).on("click.foo",t),assert.equal(e.on("mouseover"),t),assert.equal(e.on("click.foo"),t),assert.isUndefined(e.on("click")),assert.isUndefined(e.on("mouseover.foo"))}}}),suite.export(module)