require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("selection.call");suite.addBatch({"select(body)":{topic:function(){return d3.select("body").html("")},"adds a missing class as true":function(e){e.attr("class",null),e.classed("foo",!0),assert.equal(document.body.className,"foo"),e.classed("bar",!0),assert.equal(document.body.className,"foo bar")},"removes an existing class as false":function(e){e.attr("class","bar foo"),e.classed("foo",!1),assert.equal(document.body.className,"bar"),e.classed("bar",!1),assert.equal(document.body.className,"")},"preserves an existing class as true":function(e){e.attr("class","bar foo"),e.classed("foo",!0),assert.equal(document.body.className,"bar foo"),e.classed("bar",!0),assert.equal(document.body.className,"bar foo")},"preserves a missing class as false":function(e){e.attr("class","baz"),e.classed("foo",!1),assert.equal(document.body.className,"baz"),e.attr("class",null),e.classed("bar",!1),assert.equal(document.body.className,"")},"gets an existing class":function(e){e.attr("class"," foo	bar  baz"),assert.isTrue(e.classed("foo")),assert.isTrue(e.classed("bar")),assert.isTrue(e.classed("baz"))},"does not get a missing class":function(e){e.attr("class"," foo	bar  baz"),assert.isFalse(e.classed("foob")),assert.isFalse(e.classed("bare")),assert.isFalse(e.classed("rbaz"))},"accepts a name with whitespace, collapsing it":function(e){e.attr("class",null),e.classed(" foo	",!0),assert.equal(document.body.className,"foo"),e.classed("	foo  ",!1),assert.equal(document.body.className,"")},"accepts a name with multiple classes separated by whitespace":function(e){e.attr("class",null),e.classed("foo bar",!0),assert.equal(document.body.className,"foo bar"),assert.isTrue(e.classed("foo bar")),assert.isTrue(e.classed("bar foo")),assert.isFalse(e.classed("foo bar baz")),assert.isFalse(e.classed("foob bar")),e.classed("bar foo",!1),assert.equal(document.body.className,"")},"accepts a silly class name with unsafe characters":function(e){e.attr("class",null),e.classed("foo.bar",!0),assert.equal(document.body.className,"foo.bar"),assert.isTrue(e.classed("foo.bar")),assert.isFalse(e.classed("foo")),assert.isFalse(e.classed("bar")),e.classed("bar.foo",!1),assert.equal(document.body.className,"foo.bar"),e.classed("foo.bar",!1),assert.equal(document.body.className,"")},"accepts a name with duplicate classes, ignoring them":function(e){e.attr("class",null),e.classed(" foo	foo  ",!0),assert.equal(document.body.className,"foo"),e.classed("	foo  foo ",!1),assert.equal(document.body.className,"")},"accepts a value function returning true or false":function(e){e.attr("class",null),e.classed("foo",function(){return!0}),assert.equal(document.body.className,"foo"),e.classed("foo bar",function(){return!0}),assert.equal(document.body.className,"foo bar"),e.classed("foo",function(){return!1}),assert.equal(document.body.className,"bar")},"accepts a name object containing true or false":function(e){e.attr("class",null),e.classed({foo:!0}),assert.equal(document.body.className,"foo"),e.classed({bar:!0,foo:!1}),assert.equal(document.body.className,"bar")},"accepts a name object containing a function returning true or false":function(e){e.attr("class",null),e.classed({foo:function(){return!0}}),assert.equal(document.body.className,"foo")},"accepts a name object containing a mix of functions and non-functions":function(e){e.attr("class","foo"),e.classed({foo:!1,bar:function(){return!0}}),assert.equal(document.body.className,"bar")},"the value may be truthy or falsey":function(e){e.attr("class","foo"),e.classed({foo:null,bar:function(){return 1}}),assert.equal(document.body.className,"bar")},"keys in the name object may contain whitespace":function(e){e.attr("class",null),e.classed({" foo	":function(){return!0}}),assert.equal(document.body.className,"foo"),e.attr("class",null)},"keys in the name object may reference multiple classes":function(e){e.attr("class",null),e.classed({"foo bar":function(){return!0}}),assert.equal(document.body.className,"foo bar"),e.attr("class",null)},"keys in the name object may contain duplicates":function(e){e.attr("class",null),e.classed({"foo foo":function(){return!0}}),assert.equal(document.body.className,"foo"),e.attr("class",null)},"value functions are only evaluated once when used for multiple classes":function(e){var t=0;e.attr("class",null),e.classed({"foo bar":function(){return++t}}),assert.equal(document.body.className,"foo bar"),assert.equal(t,1)},"returns the current selection":function(e){assert.isTrue(e.classed("foo",!0)===e)}}}),suite.addBatch({"selectAll(div)":{topic:function(){return d3.select("body").html("").selectAll("div").data(d3.range(2)).enter().append("div")},"adds a missing class as true":function(e){e.attr("class",null),e.classed("foo",!0),assert.equal(e[0][0].className,"foo"),assert.equal(e[0][1].className,"foo"),e.classed("bar",!0),assert.equal(e[0][0].className,"foo bar"),assert.equal(e[0][1].className,"foo bar")},"adds a missing class as a function":function(e){e.data([0,1]).attr("class",null),e.classed("foo",function(e,t){return e===0}),assert.equal(e[0][0].className,"foo"),assert.equal(e[0][1].className,""),e.classed("bar",function(e,t){return t===1}),assert.equal(e[0][0].className,"foo"),assert.equal(e[0][1].className,"bar")},"removes an existing class as false":function(e){e.attr("class","bar foo"),e.classed("foo",!1),assert.equal(e[0][0].className,"bar"),assert.equal(e[0][1].className,"bar"),e.classed("bar",!1),assert.equal(e[0][0].className,""),assert.equal(e[0][1].className,"")},"removes an existing class as a function":function(e){e.data([0,1]).attr("class","bar foo"),e.classed("foo",function(e,t){return e===0}),assert.equal(e[0][0].className,"bar foo"),assert.equal(e[0][1].className,"bar"),e.classed("bar",function(e,t){return t===1}),assert.equal(e[0][0].className,"foo"),assert.equal(e[0][1].className,"bar"),e.classed("foo",function(){return!1}),assert.equal(e[0][0].className,""),assert.equal(e[0][1].className,"bar"),e.classed("bar",function(){return!1}),assert.equal(e[0][0].className,""),assert.equal(e[0][1].className,"")},"preserves an existing class as true":function(e){e.attr("class","bar foo"),e.classed("foo",!0),assert.equal(e[0][0].className,"bar foo"),assert.equal(e[0][1].className,"bar foo"),e.classed("bar",!0),assert.equal(e[0][0].className,"bar foo"),assert.equal(e[0][1].className,"bar foo")},"preserves an existing class as a function":function(e){e.attr("class","bar foo"),e.classed("foo",function(){return!0}),assert.equal(e[0][0].className,"bar foo"),assert.equal(e[0][1].className,"bar foo"),e.classed("bar",function(){return!0}),assert.equal(e[0][0].className,"bar foo"),assert.equal(e[0][1].className,"bar foo")},"preserves a missing class as false":function(e){e.attr("class","baz"),e.classed("foo",!1),assert.equal(e[0][0].className,"baz"),assert.equal(e[0][1].className,"baz"),e.attr("class",null),e.classed("bar",!1),assert.equal(e[0][0].className,""),assert.equal(e[0][1].className,"")},"preserves a missing class as a function":function(e){e.attr("class","baz"),e.classed("foo",function(){return!1}),assert.equal(e[0][0].className,"baz"),assert.equal(e[0][1].className,"baz"),e.attr("class",null),e.classed("bar",function(){return!1}),assert.equal(e[0][0].className,""),assert.equal(e[0][1].className,"")},"gets an existing class":function(e){e[0][0].className=" foo	bar  baz",assert.isTrue(e.classed("foo")),assert.isTrue(e.classed("bar")),assert.isTrue(e.classed("baz"))},"does not get a missing class":function(e){e[0][0].className=" foo	bar  baz",assert.isFalse(e.classed("foob")),assert.isFalse(e.classed("bare")),assert.isFalse(e.classed("rbaz"))},"ignores null nodes":function(e){var t=d3.selectAll("div");t[0][1]=null,t.attr("class",null).classed("foo",!0),assert.equal(e[0][0].className,"foo"),assert.equal(e[0][1].className,"")},"returns the current selection":function(e){assert.isTrue(e.classed("foo",!0)===e)}}}),suite.export(module)