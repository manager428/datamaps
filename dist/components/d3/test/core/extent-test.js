require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.extent");suite.addBatch({extent:{topic:function(){return d3.extent},"returns the numeric extent for numbers":function(e){assert.deepEqual(e([1]),[1,1]),assert.deepEqual(e([5,1,2,3,4]),[1,5]),assert.deepEqual(e([20,3]),[3,20]),assert.deepEqual(e([3,20]),[3,20])},"returns the lexicographic extent for strings":function(e){assert.deepEqual(e(["c","a","b"]),["a","c"]),assert.deepEqual(e(["20","3"]),["20","3"]),assert.deepEqual(e(["3","20"]),["20","3"])},"ignores null, undefined and NaN":function(e){assert.deepEqual(e([NaN,1,2,3,4,5]),[1,5]),assert.deepEqual(e([1,2,3,4,5,NaN]),[1,5]),assert.deepEqual(e([10,null,3,undefined,5,NaN]),[3,10]),assert.deepEqual(e([-1,null,-3,undefined,-5,NaN]),[-5,-1])},"compares heterogenous types as numbers":function(e){assert.deepEqual(e([20,"3"]),["3",20]),assert.deepEqual(e(["20",3]),[3,"20"]),assert.deepEqual(e([3,"20"]),[3,"20"]),assert.deepEqual(e(["3",20]),["3",20])},"returns undefined for empty array":function(e){assert.deepEqual(e([]),[undefined,undefined]),assert.deepEqual(e([null]),[undefined,undefined]),assert.deepEqual(e([undefined]),[undefined,undefined]),assert.deepEqual(e([NaN]),[undefined,undefined]),assert.deepEqual(e([NaN,NaN]),[undefined,undefined])},"applies the optional accessor function exactly once":function(e){var t=10;assert.deepEqual(d3.extent([0,1,2,3],function(){return++t}),[11,14])}}}),suite.export(module)