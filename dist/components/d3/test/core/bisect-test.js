require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.bisect"),i30=1<<30;suite.addBatch({bisectLeft:{topic:function(){return d3.bisectLeft},"finds the index of an exact match":function(e){var t=[1,2,3];assert.equal(e(t,1),0),assert.equal(e(t,2),1),assert.equal(e(t,3),2)},"finds the index of the first match":function(e){var t=[1,2,2,3];assert.equal(e(t,1),0),assert.equal(e(t,2),1),assert.equal(e(t,3),3)},"finds the insertion point of a non-exact match":function(e){var t=[1,2,3];assert.equal(e(t,.5),0),assert.equal(e(t,1.5),1),assert.equal(e(t,2.5),2),assert.equal(e(t,3.5),3)},"observes the optional lower bound":function(e){var t=[1,2,3,4,5];assert.equal(e(t,0,2),2),assert.equal(e(t,1,2),2),assert.equal(e(t,2,2),2),assert.equal(e(t,3,2),2),assert.equal(e(t,4,2),3),assert.equal(e(t,5,2),4),assert.equal(e(t,6,2),5)},"observes the optional bounds":function(e){var t=[1,2,3,4,5];assert.equal(e(t,0,2,3),2),assert.equal(e(t,1,2,3),2),assert.equal(e(t,2,2,3),2),assert.equal(e(t,3,2,3),2),assert.equal(e(t,4,2,3),3),assert.equal(e(t,5,2,3),3),assert.equal(e(t,6,2,3),3)},"large arrays":function(e){var t=[],n=i30;t[n++]=1,t[n++]=2,t[n++]=3,t[n++]=4,t[n++]=5,assert.equal(e(t,0,n-5,n),n-5),assert.equal(e(t,1,n-5,n),n-5),assert.equal(e(t,2,n-5,n),n-4),assert.equal(e(t,3,n-5,n),n-3),assert.equal(e(t,4,n-5,n),n-2),assert.equal(e(t,5,n-5,n),n-1),assert.equal(e(t,6,n-5,n),n-0)}}}),suite.addBatch({bisectRight:{topic:function(){return d3.bisectRight},"finds the index after an exact match":function(e){var t=[1,2,3];assert.equal(e(t,1),1),assert.equal(e(t,2),2),assert.equal(e(t,3),3)},"finds the index after the last match":function(e){var t=[1,2,2,3];assert.equal(e(t,1),1),assert.equal(e(t,2),3),assert.equal(e(t,3),4)},"finds the insertion point of a non-exact match":function(e){var t=[1,2,3];assert.equal(e(t,.5),0),assert.equal(e(t,1.5),1),assert.equal(e(t,2.5),2),assert.equal(e(t,3.5),3)},"observes the optional lower bound":function(e){var t=[1,2,3,4,5];assert.equal(e(t,0,2),2),assert.equal(e(t,1,2),2),assert.equal(e(t,2,2),2),assert.equal(e(t,3,2),3),assert.equal(e(t,4,2),4),assert.equal(e(t,5,2),5),assert.equal(e(t,6,2),5)},"observes the optional bounds":function(e){var t=[1,2,3,4,5];assert.equal(e(t,0,2,3),2),assert.equal(e(t,1,2,3),2),assert.equal(e(t,2,2,3),2),assert.equal(e(t,3,2,3),3),assert.equal(e(t,4,2,3),3),assert.equal(e(t,5,2,3),3),assert.equal(e(t,6,2,3),3)},"large arrays":function(e){var t=[],n=i30;t[n++]=1,t[n++]=2,t[n++]=3,t[n++]=4,t[n++]=5,assert.equal(e(t,0,n-5,n),n-5),assert.equal(e(t,1,n-5,n),n-4),assert.equal(e(t,2,n-5,n),n-3),assert.equal(e(t,3,n-5,n),n-2),assert.equal(e(t,4,n-5,n),n-1),assert.equal(e(t,5,n-5,n),n-0),assert.equal(e(t,6,n-5,n),n-0)}}}),suite.addBatch({"bisector(key)":{topic:function(){return d3.bisector(function(e){return e.key})},left:{topic:function(e){return e.left},"finds the index of an exact match":function(e){var t=[{key:1},{key:2},{key:3}];assert.equal(e(t,1),0),assert.equal(e(t,2),1),assert.equal(e(t,3),2)},"finds the index of the first match":function(e){var t=[{key:1},{key:2},{key:2},{key:3}];assert.equal(e(t,1),0),assert.equal(e(t,2),1),assert.equal(e(t,3),3)},"finds the insertion point of a non-exact match":function(e){var t=[{key:1},{key:2},{key:3}];assert.equal(e(t,.5),0),assert.equal(e(t,1.5),1),assert.equal(e(t,2.5),2),assert.equal(e(t,3.5),3)},"observes the optional lower bound":function(e){var t=[{key:1},{key:2},{key:3},{key:4},{key:5}];assert.equal(e(t,0,2),2),assert.equal(e(t,1,2),2),assert.equal(e(t,2,2),2),assert.equal(e(t,3,2),2),assert.equal(e(t,4,2),3),assert.equal(e(t,5,2),4),assert.equal(e(t,6,2),5)},"observes the optional bounds":function(e){var t=[{key:1},{key:2},{key:3},{key:4},{key:5}];assert.equal(e(t,0,2,3),2),assert.equal(e(t,1,2,3),2),assert.equal(e(t,2,2,3),2),assert.equal(e(t,3,2,3),2),assert.equal(e(t,4,2,3),3),assert.equal(e(t,5,2,3),3),assert.equal(e(t,6,2,3),3)},"large arrays":function(e){var t=[],n=i30;t[n++]={key:1},t[n++]={key:2},t[n++]={key:3},t[n++]={key:4},t[n++]={key:5},assert.equal(e(t,0,n-5,n),n-5),assert.equal(e(t,1,n-5,n),n-5),assert.equal(e(t,2,n-5,n),n-4),assert.equal(e(t,3,n-5,n),n-3),assert.equal(e(t,4,n-5,n),n-2),assert.equal(e(t,5,n-5,n),n-1),assert.equal(e(t,6,n-5,n),n-0)}},right:{topic:function(e){return e.right},"finds the index after an exact match":function(e){var t=[{key:1},{key:2},{key:3}];assert.equal(e(t,1),1),assert.equal(e(t,2),2),assert.equal(e(t,3),3)},"finds the index after the last match":function(e){var t=[{key:1},{key:2},{key:2},{key:3}];assert.equal(e(t,1),1),assert.equal(e(t,2),3),assert.equal(e(t,3),4)},"finds the insertion point of a non-exact match":function(e){var t=[{key:1},{key:2},{key:3}];assert.equal(e(t,.5),0),assert.equal(e(t,1.5),1),assert.equal(e(t,2.5),2),assert.equal(e(t,3.5),3)},"observes the optional lower bound":function(e){var t=[{key:1},{key:2},{key:3},{key:4},{key:5}];assert.equal(e(t,0,2),2),assert.equal(e(t,1,2),2),assert.equal(e(t,2,2),2),assert.equal(e(t,3,2),3),assert.equal(e(t,4,2),4),assert.equal(e(t,5,2),5),assert.equal(e(t,6,2),5)},"observes the optional bounds":function(e){var t=[{key:1},{key:2},{key:3},{key:4},{key:5}];assert.equal(e(t,0,2,3),2),assert.equal(e(t,1,2,3),2),assert.equal(e(t,2,2,3),2),assert.equal(e(t,3,2,3),3),assert.equal(e(t,4,2,3),3),assert.equal(e(t,5,2,3),3),assert.equal(e(t,6,2,3),3)},"large arrays":function(e){var t=[],n=i30;t[n++]={key:1},t[n++]={key:2},t[n++]={key:3},t[n++]={key:4},t[n++]={key:5},assert.equal(e(t,0,n-5,n),n-5),assert.equal(e(t,1,n-5,n),n-4),assert.equal(e(t,2,n-5,n),n-3),assert.equal(e(t,3,n-5,n),n-2),assert.equal(e(t,4,n-5,n),n-1),assert.equal(e(t,5,n-5,n),n-0),assert.equal(e(t,6,n-5,n),n-0)}}}}),suite.export(module)