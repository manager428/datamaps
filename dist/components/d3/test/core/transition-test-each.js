require("../env");var assert=require("assert");module.exports={start:{topic:function(){var e=this.callback,t=d3.select("body").html("").selectAll().data(["foo","bar"]).enter().append("div").attr("class",String),n=t.transition().delay(150),r=Date.now(),i=0,s=[],o=[],u=[],a=[],f=[],l=[];n.each("start.other",function(){++i}),n.each("start",function(s,c){o.push(this),u.push(s),a.push(c),f.push(++i),l.push(Date.now()-r),i>=4&&e(null,{selection:t,delay:l,context:o,data:u,index:a,count:f,id:n.id})})},"invokes the listener after the specified delay":function(e){assert.inDelta(e.delay,[150,150],20)},"invokes each listener exactly once, in order":function(e){assert.deepEqual(e.count,[2,4])},"uses the node as the context":function(e){assert.domEqual(e.context[1],e.selection[0][0]),assert.domEqual(e.context[0],e.selection[0][1])},"passes the data and index to the function":function(e){assert.deepEqual(e.data,["bar","foo"],"expected data, got {actual}"),assert.deepEqual(e.index,[1,0],"expected index, got {actual}")},"sets an exclusive lock on transitioning nodes":function(e){var t=e.id;assert.isTrue(t>0),assert.equal(e.selection[0][0].__transition__.count,1),assert.equal(e.selection[0][1].__transition__.count,1),assert.equal(e.selection[0][0].__transition__.active,t),assert.equal(e.selection[0][1].__transition__.active,t)}},end:{topic:function(){var e=this.callback,t=d3.select("body").html("").selectAll().data(["foo","bar"]).enter().append("div").attr("class",String),n=t.transition().duration(150),r=Date.now(),i=0,s=[],o=[],u=[],a=[],f=[],l=[];n.each("end.other",function(){++i}),n.each("end",function(s,c){o.push(this),u.push(s),a.push(c),f.push(++i),l.push(Date.now()-r),i>=4&&e(null,{selection:t,delay:l,context:o,data:u,index:a,count:f,id:n.id})})},"invokes the listener after the specified delay":function(e){assert.inDelta(e.delay,[150,150],20)},"invokes each listener exactly once, in order":function(e){assert.deepEqual(e.count,[2,4])},"uses the node as the context":function(e){assert.domEqual(e.context[1],e.selection[0][0]),assert.domEqual(e.context[0],e.selection[0][1])},"passes the data and index to the function":function(e){assert.deepEqual(e.data,["bar","foo"],"expected data, got {actual}"),assert.deepEqual(e.index,[1,0],"expected index, got {actual}")},"deletes the transition lock after end":function(e){assert.isFalse("__transition__"in e.selection[0][0]),assert.isFalse("__transition__"in e.selection[0][1])},sequenced:{topic:function(e){var t=this.callback,n=e.selection[0][0],r=e.id;d3.select(n).transition().delay(150).each("start",function(){t(null,{id:r,node:this})})},"inherits the same transition id":function(e){assert.isTrue(e.id>0),assert.equal(e.node.__transition__.count,1),assert.equal(e.node.__transition__.active,e.id)}}}}