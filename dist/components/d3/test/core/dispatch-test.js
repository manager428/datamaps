require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.dispatch");suite.addBatch({dispatch:{topic:function(){return d3.dispatch},"returns a map of dispatchers for each event type":function(e){assert.deepEqual(e(),{});var t=e("foo");assert.isTrue("foo"in t),assert.isFalse("bar"in t);var t=e("foo","bar");assert.isTrue("foo"in t),assert.isTrue("bar"in t)},"added listeners receive subsequent events":function(e){var t=e("foo"),n=0;t.on("foo",function(){++n}),t.foo(),assert.equal(n,1),t.foo(),t.foo(),assert.equal(n,3)},"the listener is passed any arguments to dispatch":function(e){var t=e("foo"),n={},r={},i,s;t.on("foo",function(e,t){i=e,s=t}),t.foo(n,r),assert.equal(i,n),assert.equal(s,r),t.foo(1,"foo"),assert.equal(i,1),assert.equal(s,"foo")},"the listener's context is the same as dispatch's":function(e){var t=e("foo"),n={},r={},i;t.on("foo",function(){i=this}),t.foo.call(n),assert.equal(i,n),t.foo.call(r),assert.equal(i,r)},"listeners are notified in the order they are added":function(e){function s(){i.push(n)}function o(){i.push(r)}var t=e("foo"),n={},r={},i=[];t.on("foo.a",s).on("foo.b",o),t.foo(),assert.deepEqual(i,[n,r]),i=[],t.on("foo.a",s),t.foo(),assert.deepEqual(i,[r,n])},"notifying listeners returns the dispatch object":function(e){var t=e("foo");assert.equal(t.foo(),t)},"adding a listener returns the dispatch object":function(e){function n(){}var t=e("foo");assert.equal(t.on("foo",n),t)},"removed listeners do not receive subsequent events":function(e){function s(){i.push(n)}function o(){i.push(r)}var t=e("foo"),n={},r={},i=[];t.on("foo.a",s).on("foo.b",o),t.foo(),i=[],t.on("foo.a",null),t.foo(),assert.deepEqual(i,[r])},"removing a shared listener only affects the intended event":function(e){function r(){++n}var t=e("foo","bar"),n=0;t.on("foo",r).on("bar",r),t.foo(),t.bar(),assert.equal(n,2),t.on("foo",null),t.bar(),assert.equal(n,3)},"adding an existing listener has no effect":function(e){function r(){++n}var t=e("foo"),n=0;t.on("foo.a",r),t.foo(),t.on("foo.a",r).on("foo.a",r),t.foo(),assert.equal(n,2)},"removing a missing listener has no effect":function(e){function r(){++n}var t=e("foo"),n=0;t.on("foo.a",null).on("foo",r).on("foo",null).on("foo",null),t.foo(),assert.equal(n,0)},"adding a listener does not affect the current event":function(e){function s(){t.on("foo.b",o),i.push(n)}function o(){i.push(r)}var t=e("foo"),n={},r={},i=[];t.on("foo.a",s),t.foo(),assert.deepEqual(i,[n])},"removing a listener does affect the current event":function(e){function s(){t.on("foo.b",null),i.push(n)}function o(){i.push(r)}var t=e("foo"),n={},r={},i=[];t.on("foo.a",s).on("foo.b",o),t.foo(),assert.deepEqual(i,[n])},"getting a listener returns the correct listener":function(e){function n(){}function r(){}function i(){}var t=e("foo");t.on("foo.a",n).on("foo.b",r).on("foo",i),assert.equal(t.on("foo.a"),n),assert.equal(t.on("foo.b"),r),assert.equal(t.on("foo"),i)}}}),suite.export(module)