require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.xml");suite.addBatch({xml:{topic:function(){var e=this.callback;return d3.xml("examples/data/sample.xml",function(t){e(null,t)})},"invokes the callback with the loaded xml":function(e){assert.deepEqual(e,{_xml:'<?xml version="1.0" encoding="UTF-8" ?>\n<hello>\n  <world name="Earth"/>\n</hello>\n'})},"does not override the mime type by default":function(e){assert.isUndefined(XMLHttpRequest._last._info.mimeType)},"":{topic:function(){var e=this.callback;return d3.xml("examples/data/sample.txt","application/xml+sample",function(t){e(null,t)})},"observes the optional mime type":function(e){assert.equal(XMLHttpRequest._last._info.mimeType,"application/xml+sample")}}," ":{topic:function(){var e=this.callback;return d3.xml("//does/not/exist.xml",function(t){e(null,t)})},"invokes the callback with null when an error occurs":function(e){assert.isNull(e)}}}}),suite.export(module)