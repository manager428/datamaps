require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.scale.identity");suite.addBatch({identity:{topic:function(){return d3.scale.identity},"domain and range":{"are identical":function(e){var t=e();assert.strictEqual(t.domain,t.range),assert.strictEqual(t.domain(),t.range());var t=e().domain([-10,0,100]);assert.deepEqual(t.range(),[-10,0,100]);var t=e().range([-10,0,100]);assert.deepEqual(t.domain(),[-10,0,100])},"default to [0, 1]":function(e){var t=e();assert.deepEqual(t.domain(),[0,1]),assert.deepEqual(t.range(),[0,1]),assert.strictEqual(t(.5),.5)},"coerce values to numbers":function(e){var t=e().domain([new Date(1990,0,1),new Date(1991,0,1)]);assert.typeOf(t.domain()[0],"number"),assert.typeOf(t.domain()[1],"number"),assert.strictEqual(t.domain()[0],+(new Date(1990,0,1))),assert.strictEqual(t.domain()[1],+(new Date(1991,0,1))),assert.typeOf(t(new Date(1989,9,20)),"number"),assert.strictEqual(t(new Date(1989,9,20)),+(new Date(1989,9,20)));var t=e().domain(["0","1"]);assert.typeOf(t.domain()[0],"number"),assert.typeOf(t.domain()[1],"number"),assert.strictEqual(t(.5),.5);var t=e().domain([new Number(0),new Number(1)]);assert.typeOf(t.domain()[0],"number"),assert.typeOf(t.domain()[1],"number"),assert.strictEqual(t(.5),.5);var t=e().range([new Date(1990,0,1),new Date(1991,0,1)]);assert.typeOf(t.range()[0],"number"),assert.typeOf(t.range()[1],"number"),assert.strictEqual(t.range()[0],+(new Date(1990,0,1))),assert.strictEqual(t.range()[1],+(new Date(1991,0,1))),assert.typeOf(t(new Date(1989,9,20)),"number"),assert.strictEqual(t(new Date(1989,9,20)),+(new Date(1989,9,20)));var t=e().range(["0","1"]);assert.typeOf(t.range()[0],"number"),assert.typeOf(t.range()[1],"number"),assert.strictEqual(t(.5),.5);var t=e().range([new Number(0),new Number(1)]);assert.typeOf(t.range()[0],"number"),assert.typeOf(t.range()[1],"number"),assert.strictEqual(t(.5),.5)},"can specify a polyidentity domain and range":function(e){var t=e().domain([-10,0,100]);assert.deepEqual(t.domain(),[-10,0,100]),assert.strictEqual(t(-5),-5),assert.strictEqual(t(50),50),assert.strictEqual(t(75),75);var t=e().range([-10,0,100]);assert.deepEqual(t.range(),[-10,0,100]),assert.strictEqual(t(-5),-5),assert.strictEqual(t(50),50),assert.strictEqual(t(75),75)},"do not affect the identity function":function(e){var t=e().domain([Infinity,NaN]);assert.strictEqual(t(42),42),assert.strictEqual(t.invert(-42),-42)}},"is the identity function":function(e){var t=e().domain([1,2]);assert.strictEqual(t(.5),.5),assert.strictEqual(t(1),1),assert.strictEqual(t(1.5),1.5),assert.strictEqual(t(2),2),assert.strictEqual(t(2.5),2.5)},"coerces input to a number":function(e){var t=e().domain([1,2]);assert.strictEqual(t("2"),2)},invert:{"is the identity function":function(e){var t=e().domain([1,2]);assert.strictEqual(t.invert(.5),.5),assert.strictEqual(t.invert(1),1),assert.strictEqual(t.invert(1.5),1.5),assert.strictEqual(t.invert(2),2),assert.strictEqual(t.invert(2.5),2.5)},"coerces range value to numbers":function(e){var t=e().range(["0","2"]);assert.strictEqual(t.invert("1"),1);var t=e().range([new Date(1990,0,1),new Date(1991,0,1)]);assert.strictEqual(t.invert(new Date(1990,6,2,13)),+(new Date(1990,6,2,13)));var t=e().range(["#000","#fff"]);assert.isNaN(t.invert("#999"))},"coerces input to a number":function(e){var t=e().domain([1,2]);assert.strictEqual(t.invert("2"),2)}},ticks:{"generates ticks of varying degree":function(e){var t=e();assert.deepEqual(t.ticks(1).map(t.tickFormat(1)),[0,1]),assert.deepEqual(t.ticks(2).map(t.tickFormat(2)),[0,.5,1]),assert.deepEqual(t.ticks(5).map(t.tickFormat(5)),[0,.2,.4,.6,.8,1]),assert.deepEqual(t.ticks(10).map(t.tickFormat(10)),[0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]);var t=e().domain([1,0]);assert.deepEqual(t.ticks(1).map(t.tickFormat(1)),[0,1]),assert.deepEqual(t.ticks(2).map(t.tickFormat(2)),[0,.5,1]),assert.deepEqual(t.ticks(5).map(t.tickFormat(5)),[0,.2,.4,.6,.8,1]),assert.deepEqual(t.ticks(10).map(t.tickFormat(10)),[0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1])},"formats ticks with the appropriate precision":function(e){var t=e().domain([.123456789,1.23456789]);assert.strictEqual(t.tickFormat(1)(t.ticks(1)[0]),"1"),assert.strictEqual(t.tickFormat(2)(t.ticks(2)[0]),"0.5"),assert.strictEqual(t.tickFormat(4)(t.ticks(4)[0]),"0.2"),assert.strictEqual(t.tickFormat(8)(t.ticks(8)[0]),"0.2"),assert.strictEqual(t.tickFormat(16)(t.ticks(16)[0]),"0.2"),assert.strictEqual(t.tickFormat(32)(t.ticks(32)[0]),"0.15"),assert.strictEqual(t.tickFormat(64)(t.ticks(64)[0]),"0.14"),assert.strictEqual(t.tickFormat(128)(t.ticks(128)[0]),"0.13"),assert.strictEqual(t.tickFormat(256)(t.ticks(256)[0]),"0.125")}},copy:{"changes to the domain or range are isolated":function(e){var t=e(),n=t.copy();t.domain([1,2]),assert.deepEqual(n.domain(),[0,1]),n.domain([2,3]),assert.deepEqual(t.domain(),[1,2]),assert.deepEqual(n.domain(),[2,3]);var t=e(),n=t.copy();t.range([1,2]),assert.deepEqual(n.range(),[0,1]),n.range([2,3]),assert.deepEqual(t.range(),[1,2]),assert.deepEqual(n.range(),[2,3])}}}}),suite.export(module)