require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.scale.threshold");suite.addBatch({threshold:{topic:function(){return d3.scale.threshold},"has the default domain [.5]":function(e){var t=e();assert.deepEqual(t.domain(),[.5]),assert.equal(t(.49),0)},"has the default range [0, 1]":function(e){var t=e();assert.deepEqual(t.range(),[0,1]),assert.equal(t(.5),1)},"maps a number to a discrete value in the range":function(e){var t=e().domain([1/3,2/3]).range(["a","b","c"]);assert.equal(t(0),"a"),assert.equal(t(.2),"a"),assert.equal(t(.4),"b"),assert.equal(t(.6),"b"),assert.equal(t(.8),"c"),assert.equal(t(1),"c")},"domain values are arbitrary":function(e){var t=e().domain(["10","2"]).range([0,1,2]);assert.strictEqual(t.domain()[0],"10"),assert.strictEqual(t.domain()[1],"2"),assert.equal(t("0"),0),assert.equal(t("12"),1),assert.equal(t("3"),2)},"range values are arbitrary":function(e){var t={},n={},r={},i=e().domain([1/3,2/3]).range([t,n,r]);assert.equal(i(0),t),assert.equal(i(.2),t),assert.equal(i(.4),n),assert.equal(i(.6),n),assert.equal(i(.8),r),assert.equal(i(1),r)}}}),suite.export(module)