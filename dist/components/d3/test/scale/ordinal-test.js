require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.scale.ordinal");suite.addBatch({ordinal:{topic:function(){return d3.scale.ordinal},domain:{"defaults to the empty array":function(e){assert.isEmpty(e().domain())},"new input values are added to the domain":function(e){var t=e().range(["foo","bar"]);assert.equal(t(0),"foo"),assert.deepEqual(t.domain(),["0"]),assert.equal(t(1),"bar"),assert.deepEqual(t.domain(),["0","1"]),assert.equal(t(0),"foo"),assert.deepEqual(t.domain(),["0","1"])},"setting the domain forgets previous values":function(e){var t=e().range(["foo","bar"]);assert.equal(t(1),"foo"),assert.equal(t(0),"bar"),assert.deepEqual(t.domain(),[1,0]),t.domain(["0","1"]),assert.equal(t(0),"foo"),assert.equal(t(1),"bar"),assert.deepEqual(t.domain(),["0","1"])},"uniqueness is based on string coercion":function(e){var t=e().domain(["foo"]).range([42,43,44]);assert.equal(t(new String("foo")),42),assert.equal(t({toString:function(){return"foo"}}),42),assert.equal(t({toString:function(){return"bar"}}),43)},"orders domain values by the order in which they are seen":function(e){var t=e();t("foo"),t("bar"),t("baz"),assert.deepEqual(t.domain(),["foo","bar","baz"]),t.domain(["baz","bar"]),t("foo"),assert.deepEqual(t.domain(),["baz","bar","foo"]),t.domain(["baz","foo"]),assert.deepEqual(t.domain(),["baz","foo"]),t.domain([]),t("foo"),t("bar"),assert.deepEqual(t.domain(),["foo","bar"])},"does not coerce domain values to strings":function(e){var t=e().domain([0,1]);assert.deepEqual(t.domain(),[0,1]),assert.typeOf(t.domain()[0],"number"),assert.typeOf(t.domain()[1],"number")},"does not barf on object built-ins":function(e){var t=e().domain(["__proto__","hasOwnProperty"]).range([42,43]);assert.equal(t("__proto__"),42),assert.equal(t("hasOwnProperty"),43),assert.deepEqual(t.domain(),["__proto__","hasOwnProperty"])}},range:{"defaults to the empty array":function(e){var t=e();assert.isEmpty(t.range()),assert.isUndefined(t(0))},"setting the range remembers previous values":function(e){var t=e();assert.isUndefined(t(0)),assert.isUndefined(t(1)),t.range(["foo","bar"]),assert.equal(t(0),"foo"),assert.equal(t(1),"bar")},"recycles values when exhausted":function(e){var t=e().range(["a","b","c"]);assert.equal(t(0),"a"),assert.equal(t(1),"b"),assert.equal(t(2),"c"),assert.equal(t(3),"a"),assert.equal(t(4),"b"),assert.equal(t(5),"c"),assert.equal(t(2),"c"),assert.equal(t(1),"b"),assert.equal(t(0),"a")}},"maps distinct values to discrete values":function(e){var t=e().range(["a","b","c"]);assert.equal(t(0),"a"),assert.equal(t("0"),"a"),assert.equal(t([0]),"a"),assert.equal(t(1),"b"),assert.equal(t(2),"c"),assert.equal(t(new Number(2)),"c")},rangePoints:{"computes discrete points in a continuous range":function(e){var t=e().domain(["a","b","c"]).rangePoints([0,120]);assert.deepEqual(t.range(),[0,60,120]),assert.equal(t.rangeBand(),0);var t=e().domain(["a","b","c"]).rangePoints([0,120],1);assert.deepEqual(t.range(),[20,60,100]),assert.equal(t.rangeBand(),0);var t=e().domain(["a","b","c"]).rangePoints([0,120],2);assert.deepEqual(t.range(),[30,60,90]),assert.equal(t.rangeBand(),0)},"correctly handles singleton domains":function(e){var t=e().domain(["a"]).rangePoints([0,120]);assert.deepEqual(t.range(),[60]),assert.equal(t.rangeBand(),0)},"can be set to a descending range":function(e){var t=e().domain(["a","b","c"]).rangePoints([120,0]);assert.deepEqual(t.range(),[120,60,0]),assert.equal(t.rangeBand(),0);var t=e().domain(["a","b","c"]).rangePoints([120,0],1);assert.deepEqual(t.range(),[100,60,20]),assert.equal(t.rangeBand(),0);var t=e().domain(["a","b","c"]).rangePoints([120,0],2);assert.deepEqual(t.range(),[90,60,30]),assert.equal(t.rangeBand(),0)}},rangeBands:{"computes discrete bands in a continuous range":function(e){var t=e().domain(["a","b","c"]).rangeBands([0,120]);assert.deepEqual(t.range(),[0,40,80]),assert.equal(t.rangeBand(),40);var t=e().domain(["a","b","c"]).rangeBands([0,120],.2);assert.deepEqual(t.range(),[7.5,45,82.5]),assert.equal(t.rangeBand(),30)},"setting domain recomputes range bands":function(e){var t=e().rangeRoundBands([0,100]).domain(["a","b","c"]);assert.deepEqual(t.range(),[1,34,67]),assert.equal(t.rangeBand(),33),t.domain(["a","b","c","d"]),assert.deepEqual(t.range(),[0,25,50,75]),assert.equal(t.rangeBand(),25)},"can be set to a descending range":function(e){var t=e().domain(["a","b","c"]).rangeBands([120,0]);assert.deepEqual(t.range(),[80,40,0]),assert.equal(t.rangeBand(),40);var t=e().domain(["a","b","c"]).rangeBands([120,0],.2);assert.deepEqual(t.range(),[82.5,45,7.5]),assert.equal(t.rangeBand(),30)},"can specify a different outer padding":function(e){var t=e().domain(["a","b","c"]).rangeBands([120,0],.2,.1);assert.deepEqual(t.range(),[84,44,4]),assert.equal(t.rangeBand(),32);var t=e().domain(["a","b","c"]).rangeBands([120,0],.2,1);assert.deepEqual(t.range(),[75,50,25]),assert.equal(t.rangeBand(),20)}},rangeRoundBands:{"computes discrete rounded bands in a continuous range":function(e){var t=e().domain(["a","b","c"]).rangeRoundBands([0,100]);assert.deepEqual(t.range(),[1,34,67]),assert.equal(t.rangeBand(),33);var t=e().domain(["a","b","c"]).rangeRoundBands([0,100],.2);assert.deepEqual(t.range(),[7,38,69]),assert.equal(t.rangeBand(),25)},"can be set to a descending range":function(e){var t=e().domain(["a","b","c"]).rangeRoundBands([100,0]);assert.deepEqual(t.range(),[67,34,1]),assert.equal(t.rangeBand(),33);var t=e().domain(["a","b","c"]).rangeRoundBands([100,0],.2);assert.deepEqual(t.range(),[69,38,7]),assert.equal(t.rangeBand(),25)},"can specify a different outer padding":function(e){var t=e().domain(["a","b","c"]).rangeRoundBands([120,0],.2,.1);assert.deepEqual(t.range(),[84,44,4]),assert.equal(t.rangeBand(),32);var t=e().domain(["a","b","c"]).rangeRoundBands([120,0],.2,1);assert.deepEqual(t.range(),[75,50,25]),assert.equal(t.rangeBand(),20)}},rangeExtent:{"returns the continuous range":function(e){var t=e().domain(["a","b","c"]).rangePoints([20,120]);assert.deepEqual(t.rangeExtent(),[20,120]);var t=e().domain(["a","b","c"]).rangeBands([10,110]);assert.deepEqual(t.rangeExtent(),[10,110]);var t=e().domain(["a","b","c"]).rangeRoundBands([0,100]);assert.deepEqual(t.rangeExtent(),[0,100]);var t=e().domain(["a","b","c"]).range([0,20,100]);assert.deepEqual(t.rangeExtent(),[0,100])},"can handle descending ranges":function(e){var t=e().domain(["a","b","c"]).rangeBands([100,0]);assert.deepEqual(t.rangeExtent(),[0,100])}},copy:{"changes to the domain are isolated":function(e){var t=e().range(["foo","bar"]),n=t.copy();t.domain([1,2]),assert.deepEqual(n.domain(),[]),assert.equal(t(1),"foo"),assert.equal(n(1),"foo"),n.domain([2,3]),assert.equal(t(2),"bar"),assert.equal(n(2),"foo"),assert.deepEqual(t.domain(),["1","2"]),assert.deepEqual(n.domain(),["2","3"])},"changes to the range are isolated":function(e){var t=e().range(["foo","bar"]),n=t.copy();t.range(["bar","foo"]),assert.equal(t(1),"bar"),assert.equal(n(1),"foo"),assert.deepEqual(n.range(),["foo","bar"]),n.range(["foo","baz"]),assert.equal(t(2),"foo"),assert.equal(n(2),"baz"),assert.deepEqual(t.range(),["bar","foo"]),assert.deepEqual(n.range(),["foo","baz"])},"changes to the range type are isolated":function(e){var t=e().domain([0,1]).rangeBands([0,1],.2),n=t.copy();t.rangePoints([1,2]),assert.inDelta(t(0),1,1e-6),assert.inDelta(t(1),2,1e-6),assert.inDelta(t.rangeBand(),0,1e-6),assert.inDelta(n(0),1/11,1e-6),assert.inDelta(n(1),6/11,1e-6),assert.inDelta(n.rangeBand(),4/11,1e-6),n.rangeBands([0,1]),assert.inDelta(t(0),1,1e-6),assert.inDelta(t(1),2,1e-6),assert.inDelta(t.rangeBand(),0,1e-6),assert.inDelta(n(0),0,1e-6),assert.inDelta(n(1),.5,1e-6),assert.inDelta(n.rangeBand(),.5,1e-6)}}}}),suite.export(module)