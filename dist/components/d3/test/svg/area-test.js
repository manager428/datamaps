function testInterpolation(e,t){return arguments.length<2&&(t=e),function(n){var r=n().interpolate(e),i=[[0,0],[1,1],[2,0],[3,1],[4,0]],s=d3.svg.line().interpolate(t).x(r.x0()).y(r.y0()),o=d3.svg.line().interpolate(e).x(r.x1()).y(r.y1());assert.pathEqual(r(i),o(i)+"L"+s(i.reverse()).substring(1)+"Z")}}require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.svg.area");suite.addBatch({area:{topic:function(){return d3.svg.area},"x is an alias for setting x0 and x1":function(e){function n(){}var t=e().x(n);assert.equal(t.x(),n),assert.equal(t.x0(),n),assert.equal(t.x1(),n)},"x is an alias for getting x1":function(e){function n(){}var t=e().x1(n);assert.equal(t.x(),n)},"y is an alias for setting y0 and y1":function(e){function n(){}var t=e().y(n);assert.equal(t.y(),n),assert.equal(t.y0(),n),assert.equal(t.y1(),n)},"y is an alias for getting x1":function(e){function n(){}var t=e().y1(n);assert.equal(t.y(),n)},"x0 defaults to a function accessor":function(e){var t=e();assert.pathEqual(t([[1,2],[4,3]]),"M1,2L4,3L4,0L1,0Z"),assert.typeOf(t.x0(),"function")},"x0 can be defined as a constant":function(e){var t=e().x0(0);assert.pathEqual(t([[1,2],[4,3]]),"M1,2L4,3L0,0L0,0Z"),assert.equal(t.x0(),0)},"x0 can be defined as a function":function(e){function o(e,t){return r.push(e),i.push(t),s.push(this),0}var t=e().x0(o),n={},r=[],i=[],s=[];assert.pathEqual(t.call(n,[[1,2],[4,3]]),"M1,2L4,3L0,0L0,0Z"),assert.deepEqual(r,[[1,2],[4,3]],"expected data, got {actual}"),assert.deepEqual(i,[0,1],"expected index, got {actual}"),assert.deepEqual(s,[n,n],"expected this, got {actual}")},"x1 defaults to a function accessor":function(e){var t=e();assert.pathEqual(t([[1,2],[4,3]]),"M1,2L4,3L4,0L1,0Z"),assert.typeOf(t.x1(),"function")},"x1 can be defined as a constant":function(e){var t=e().x1(0);assert.pathEqual(t([[1,2],[4,3]]),"M0,2L0,3L4,0L1,0Z"),assert.equal(t.x1(),0)},"x1 can be defined as a function":function(e){function o(e,t){return r.push(e),i.push(t),s.push(this),0}var t=e().x1(o),n={},r=[],i=[],s=[];assert.pathEqual(t.call(n,[[1,2],[4,3]]),"M0,2L0,3L4,0L1,0Z"),assert.deepEqual(r,[[1,2],[4,3]],"expected data, got {actual}"),assert.deepEqual(i,[0,1],"expected index, got {actual}"),assert.deepEqual(s,[n,n],"expected this, got {actual}")},"y0 defaults to zero":function(e){var t=e();assert.pathEqual(t([[1,2],[4,3]]),"M1,2L4,3L4,0L1,0Z"),assert.equal(t.y0(),0)},"y0 can be defined as a constant":function(e){var t=e().y0(1);assert.pathEqual(t([[1,2],[4,3]]),"M1,2L4,3L4,1L1,1Z"),assert.equal(t.y0(),1)},"y0 can be defined as a function":function(e){function o(e,t){return r.push(e),i.push(t),s.push(this),1}var t=e().y0(o),n={},r=[],i=[],s=[];assert.pathEqual(t.call(n,[[1,2],[4,3]]),"M1,2L4,3L4,1L1,1Z"),assert.deepEqual(r,[[1,2],[4,3]],"expected data, got {actual}"),assert.deepEqual(i,[0,1],"expected index, got {actual}"),assert.deepEqual(s,[n,n],"expected this, got {actual}")},"y1 defaults to a function accessor":function(e){var t=e();assert.pathEqual(t([[1,2],[4,3]]),"M1,2L4,3L4,0L1,0Z"),assert.typeOf(t.y1(),"function")},"y1 can be defined as a constant":function(e){var t=e().y1(1);assert.pathEqual(t([[1,2],[4,3]]),"M1,1L4,1L4,0L1,0Z"),assert.equal(t.y1(),1)},"y1 can be defined as a function":function(e){function o(e,t){return r.push(e),i.push(t),s.push(this),1}var t=e().y1(o),n={},r=[],i=[],s=[];assert.pathEqual(t.call(n,[[1,2],[4,3]]),"M1,1L4,1L4,0L1,0Z"),assert.deepEqual(r,[[1,2],[4,3]],"expected data, got {actual}"),assert.deepEqual(i,[0,1],"expected index, got {actual}"),assert.deepEqual(s,[n,n],"expected this, got {actual}")},"if x0 === x1, x is only evaluated once per point":function(e){function o(e,t){return r.push(e),i.push(t),s.push(this),0}var t=e().x(o),n={},r=[],i=[],s=[];assert.pathEqual(t.call(n,[[1,2],[4,3]]),"M0,2L0,3L0,0L0,0Z"),assert.deepEqual(r,[[1,2],[4,3]],"expected data, got {actual}"),assert.deepEqual(i,[0,1],"expected index, got {actual}"),assert.deepEqual(s,[n,n],"expected this, got {actual}")},"if y0 === y1, y is only evaluated once per point":function(e){function o(e,t){return r.push(e),i.push(t),s.push(this),1}var t=e().y(o),n={},r=[],i=[],s=[];assert.pathEqual(t.call(n,[[1,2],[4,3]]),"M1,1L4,1L4,1L1,1Z"),assert.deepEqual(r,[[1,2],[4,3]],"expected data, got {actual}"),assert.deepEqual(i,[0,1],"expected index, got {actual}"),assert.deepEqual(s,[n,n],"expected this, got {actual}")},"interpolate defaults to linear":function(e){assert.equal(e().interpolate(),"linear")},"interpolate can be defined as a constant":function(e){var t=e().interpolate("step-before");assert.pathEqual(t([[0,0],[1,1]]),"M0,0V1H1L1,0H0V0Z"),assert.equal(t.interpolate(),"step-before")},"invalid interpolates fallback to linear":function(e){assert.equal(e().interpolate("__proto__").interpolate(),"linear")},"tension defaults to .7":function(e){assert.equal(e().tension(),.7)},"tension can be specified as a constant":function(e){var t=e().tension(.5);assert.equal(t.tension(),.5)},"returns null if input points array is empty":function(e){assert.isNull(e()([]))},"interpolate(linear)":{"supports linear interpolation":testInterpolation("linear")},"interpolate(step)":{"supports step-before interpolation":testInterpolation("step-before","step-after"),"supports step-after interpolation":testInterpolation("step-after","step-before")},"interpolate(basis)":{"supports basis interpolation":testInterpolation("basis"),"supports basis-open interpolation":testInterpolation("basis-open")},"interpolate(cardinal)":{"supports cardinal interpolation":testInterpolation("cardinal"),"supports cardinal-open interpolation":testInterpolation("cardinal-open")},"interpolate(monotone)":{"supports monotone interpolation":testInterpolation("monotone")}}}),suite.export(module)