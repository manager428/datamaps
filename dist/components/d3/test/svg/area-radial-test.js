function testInterpolation(e){var t=[[10,0],[20,1],[20,2],[10,3]],n=d3.svg.area.radial().innerRadius(function(e){return e[0]}).outerRadius(function(e){return e[0]*2}).angle(function(e){return e[1]}),r=d3.svg.area().x0(function(e){return e[0]*Math.cos(e[1]-Math.PI/2)}).x1(function(e){return 2*e[0]*Math.cos(e[1]-Math.PI/2)}).y0(function(e){return e[0]*Math.sin(e[1]-Math.PI/2)}).y1(function(e){return 2*e[0]*Math.sin(e[1]-Math.PI/2)});return function(){assert.pathEqual(n.interpolate(e)(t),r.interpolate(e)(t))}}require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.svg.area.radial");suite.addBatch({"area.radial":{topic:function(){return d3.svg.area.radial},"radius is an alias for setting innerRadius and outerRadius":function(e){function n(){}var t=e().radius(n);assert.equal(t.radius(),n),assert.equal(t.innerRadius(),n),assert.equal(t.outerRadius(),n)},"radius is an alias for getting outerRadius":function(e){function n(){}var t=e().outerRadius(n);assert.equal(t.radius(),n)},"angle is an alias for setting startAngle and endAngle":function(e){function n(){}var t=e().angle(n);assert.equal(t.angle(),n),assert.equal(t.startAngle(),n),assert.equal(t.endAngle(),n)},"angle is an alias for getting endAngle":function(e){function n(){}var t=e().endAngle(n);assert.equal(t.angle(),n)},"innerRadius defaults to a function accessor":function(e){var t=e();assert.pathEqual(t([[10,0],[20,1],[20,2],[10,3]]),"M0,-10L16.829420,-10.806046L18.185949,8.322937L1.411200,9.899925L0,-10L0,-20L0,-20L0,-10Z"),assert.typeOf(t.innerRadius(),"function")},"innerRadius can be defined as a constant":function(e){var t=e().innerRadius(30);assert.pathEqual(t([[10,0],[20,1],[20,2],[10,3]]),"M0,-10L16.829420,-10.806046L18.185949,8.322937L1.411200,9.899925L0,-30L0,-30L0,-30L0,-30Z"),assert.equal(t.innerRadius(),30)},"innerRadius can be defined as a function":function(e){function o(e,t){return r.push(e),i.push(t),s.push(this),30}var t=e().innerRadius(o),n={},r=[],i=[],s=[];assert.pathEqual(t.call(n,[[10,0],[20,1],[20,2],[10,3]]),"M0,-10L16.829420,-10.806046L18.185949,8.322937L1.411200,9.899925L0,-30L0,-30L0,-30L0,-30Z"),assert.deepEqual(r,[[10,0],[20,1],[20,2],[10,3]],"expected data, got {actual}"),assert.deepEqual(i,[0,1,2,3],"expected index, got {actual}"),assert.deepEqual(s,[n,n,n,n],"expected this, got {actual}")},"outerRadius defaults to a function accessor":function(e){var t=e();assert.pathEqual(t([[10,0],[20,1],[20,2],[10,3]]),"M0,-10L16.829420,-10.806046L18.185949,8.322937L1.411200,9.899925L0,-10L0,-20L0,-20L0,-10Z"),assert.typeOf(t.outerRadius(),"function")},"outerRadius can be defined as a constant":function(e){var t=e().outerRadius(30);assert.pathEqual(t([[10,0],[20,1],[20,2],[10,3]]),"M0,-30L25.244130,-16.209069L27.278923,12.484405L4.233600,29.699775L0,-10L0,-20L0,-20L0,-10Z"),assert.equal(t.outerRadius(),30)},"outerRadius can be defined as a function":function(e){function o(e,t){return r.push(e),i.push(t),s.push(this),30}var t=e().outerRadius(o),n={},r=[],i=[],s=[];assert.pathEqual(t.call(n,[[10,0],[20,1],[20,2],[10,3]]),"M0,-30L25.244130,-16.209069L27.278923,12.484405L4.233600,29.699775L0,-10L0,-20L0,-20L0,-10Z"),assert.deepEqual(r,[[10,0],[20,1],[20,2],[10,3]],"expected data, got {actual}"),assert.deepEqual(i,[0,1,2,3],"expected index, got {actual}"),assert.deepEqual(s,[n,n,n,n],"expected this, got {actual}")},"startAngle defaults to zero":function(e){var t=e();assert.pathEqual(t([[10,0],[20,1],[20,2],[10,3]]),"M0,-10L16.829420,-10.806046L18.185949,8.322937L1.411200,9.899925L0,-10L0,-20L0,-20L0,-10Z"),assert.equal(t.startAngle(),0)},"startAngle can be defined as a constant":function(e){var t=e().startAngle(Math.PI/2);assert.pathEqual(t([[10,0],[20,1],[20,2],[10,3]]),"M0,-10L16.829420,-10.806046L18.185949,8.322937L1.411200,9.899925L10,0L20,0L20,0L10,0Z"),assert.equal(t.startAngle(),Math.PI/2)},"startAngle can be defined as a function":function(e){function o(e,t){return r.push(e),i.push(t),s.push(this),Math.PI/2}var t=e().startAngle(o),n={},r=[],i=[],s=[];assert.pathEqual(t.call(n,[[10,0],[20,1],[20,2],[10,3]]),"M0,-10L16.829420,-10.806046L18.185949,8.322937L1.411200,9.899925L10,0L20,0L20,0L10,0Z"),assert.deepEqual(r,[[10,0],[20,1],[20,2],[10,3]],"expected data, got {actual}"),assert.deepEqual(i,[0,1,2,3],"expected index, got {actual}"),assert.deepEqual(s,[n,n,n,n],"expected this, got {actual}")},"endAngle defaults to a function accessor":function(e){var t=e();assert.pathEqual(t([[10,0],[20,1],[20,2],[10,3]]),"M0,-10L16.829420,-10.806046L18.185949,8.322937L1.411200,9.899925L0,-10L0,-20L0,-20L0,-10Z"),assert.typeOf(t.endAngle(),"function")},"endAngle can be defined as a constant":function(e){var t=e().endAngle(Math.PI/2);assert.pathEqual(t([[10,0],[20,1],[20,2],[10,3]]),"M10,0L20,0L20,0L10,0L0,-10L0,-20L0,-20L0,-10Z"),assert.equal(t.endAngle(),Math.PI/2)},"endAngle can be defined as a function":function(e){function o(e,t){return r.push(e),i.push(t),s.push(this),Math.PI/2}var t=e().endAngle(o),n={},r=[],i=[],s=[];assert.pathEqual(t.call(n,[[10,0],[20,1],[20,2],[10,3]]),"M10,0L20,0L20,0L10,0L0,-10L0,-20L0,-20L0,-10Z"),assert.deepEqual(r,[[10,0],[20,1],[20,2],[10,3]],"expected data, got {actual}"),assert.deepEqual(i,[0,1,2,3],"expected index, got {actual}"),assert.deepEqual(s,[n,n,n,n],"expected this, got {actual}")},"if innerRadius === outerRadius, radius is only evaluated once per point":function(e){function o(e,t){return r.push(e),i.push(t),s.push(this),30}var t=e().radius(o),n={},r=[],i=[],s=[];assert.pathEqual(t.call(n,[[10,0],[20,1],[20,2],[10,3]]),"M0,-30L25.244130,-16.209069L27.278923,12.484405L4.233600,29.699775L0,-30L0,-30L0,-30L0,-30Z"),assert.deepEqual(r,[[10,0],[20,1],[20,2],[10,3]],"expected data, got {actual}"),assert.deepEqual(i,[0,1,2,3],"expected index, got {actual}"),assert.deepEqual(s,[n,n,n,n],"expected this, got {actual}")},"if startAngle === endAngle, angle is only evaluated once per point":function(e){function o(e,t){return r.push(e),i.push(t),s.push(this),Math.PI/2}var t=e().angle(o),n={},r=[],i=[],s=[];assert.pathEqual(t.call(n,[[10,0],[20,1],[20,2],[10,3]]),"M10,0L20,0L20,0L10,0L10,0L20,0L20,0L10,0Z"),assert.deepEqual(r,[[10,0],[20,1],[20,2],[10,3]],"expected data, got {actual}"),assert.deepEqual(i,[0,1,2,3],"expected index, got {actual}"),assert.deepEqual(s,[n,n,n,n],"expected this, got {actual}")},"interpolate defaults to linear":function(e){assert.equal(e().interpolate(),"linear")},"interpolate can be defined as a constant":function(e){var t=e().interpolate("step-before");assert.pathEqual(t([[0,0],[1,1]]),"M0,0V-0.540302H0.841471L0,-1H0V0Z"),assert.equal(t.interpolate(),"step-before")},"tension defaults to .7":function(e){assert.equal(e().tension(),.7)},"tension can be specified as a constant":function(e){var t=e().tension(.5);assert.equal(t.tension(),.5)},"returns null if input points array is empty":function(e){assert.isNull(e()([]))},"interpolate(linear)":{"supports linear interpolation":testInterpolation("linear")},"interpolate(step)":{"supports step-before interpolation":testInterpolation("step-before"),"supports step-after interpolation":testInterpolation("step-after")},"interpolate(basis)":{"supports basis interpolation":testInterpolation("basis"),"supports basis-open interpolation":testInterpolation("basis-open"),"supports basis-closed interpolation":testInterpolation("basis-closed")},"interpolate(cardinal)":{"supports cardinal interpolation":testInterpolation("cardinal"),"supports cardinal-open interpolation":testInterpolation("cardinal-open"),"supports cardinal-closed interpolation":testInterpolation("cardinal-closed")},"interpolate(monotone)":{"supports monotone interpolation":testInterpolation("monotone")}}}),suite.export(module)