$(document).ready(function(){module("Backbone.Events"),test("Events: on and trigger",function(){var e={counter:0};_.extend(e,Backbone.Events),e.on("event",function(){e.counter+=1}),e.trigger("event"),equal(e.counter,1,"counter should be incremented."),e.trigger("event"),e.trigger("event"),e.trigger("event"),e.trigger("event"),equal(e.counter,5,"counter should be incremented five times.")}),test("Events: binding and triggering multiple events",function(){var e={counter:0};_.extend(e,Backbone.Events),e.on("a b c",function(){e.counter+=1}),e.trigger("a"),equal(e.counter,1),e.trigger("a b"),equal(e.counter,3),e.trigger("c"),equal(e.counter,4),e.off("a c"),e.trigger("a b c"),equal(e.counter,5)}),test("Events: trigger all for each event",function(){var e,t,n={counter:0};_.extend(n,Backbone.Events),n.on("all",function(r){n.counter++,r=="a"&&(e=!0),r=="b"&&(t=!0)}).trigger("a b"),ok(e),ok(t),equal(n.counter,2)}),test("Events: on, then unbind all functions",function(){var e={counter:0};_.extend(e,Backbone.Events);var t=function(){e.counter+=1};e.on("event",t),e.trigger("event"),e.off("event"),e.trigger("event"),equal(e.counter,1,"counter should have only been incremented once.")}),test("Events: bind two callbacks, unbind only one",function(){var e={counterA:0,counterB:0};_.extend(e,Backbone.Events);var t=function(){e.counterA+=1};e.on("event",t),e.on("event",function(){e.counterB+=1}),e.trigger("event"),e.off("event",t),e.trigger("event"),equal(e.counterA,1,"counterA should have only been incremented once."),equal(e.counterB,2,"counterB should have been incremented twice.")}),test("Events: unbind a callback in the midst of it firing",function(){var e={counter:0};_.extend(e,Backbone.Events);var t=function(){e.counter+=1,e.unbind("event",t)};e.bind("event",t),e.trigger("event"),e.trigger("event"),e.trigger("event"),equal(e.counter,1,"the callback should have been unbound.")}),test("Events: two binds that unbind themeselves",function(){var e={counterA:0,counterB:0};_.extend(e,Backbone.Events);var t=function(){e.counterA+=1,e.unbind("event",t)},n=function(){e.counterB+=1,e.unbind("event",n)};e.bind("event",t),e.bind("event",n),e.trigger("event"),e.trigger("event"),e.trigger("event"),equal(e.counterA,1,"counterA should have only been incremented once."),equal(e.counterB,1,"counterB should have only been incremented once.")}),test("Events: bind a callback with a supplied context",function(){expect(1);var e=function(){return this};e.prototype.assertTrue=function(){ok(!0,"`this` was bound to the callback")};var t=_.extend({},Backbone.Events);t.bind("event",function(){this.assertTrue()},new e),t.trigger("event")}),test("Events: nested trigger with unbind",function(){expect(1);var e={counter:0};_.extend(e,Backbone.Events);var t=function(){e.counter+=1,e.unbind("event",t),e.trigger("event")},n=function(){e.counter+=1};e.bind("event",t),e.bind("event",n),e.trigger("event"),equal(e.counter,3,"counter should have been incremented three times")}),test("Events: callback list is not altered during trigger",function(){var e=0,t=_.extend({},Backbone.Events),n=function(){e++};t.bind("event",function(){t.bind("event",n).bind("all",n)}).trigger("event"),equal(e,0,"bind does not alter callback list"),t.unbind().bind("event",function(){t.unbind("event",n).unbind("all",n)}).bind("event",n).bind("all",n).trigger("event"),equal(e,2,"unbind does not alter callback list")}),test("if no callback is provided, `on` is a noop",function(){_.extend({},Backbone.Events).bind("test").trigger("test")}),test("remove all events for a specific context",4,function(){var e=_.extend({},Backbone.Events);e.on("x y all",function(){ok(!0)}),e.on("x y all",function(){ok(!1)},e),e.off(null,null,e),e.trigger("x y")}),test("remove all events for a specific callback",4,function(){var e=_.extend({},Backbone.Events),t=function(){ok(!0)},n=function(){ok(!1)};e.on("x y all",t),e.on("x y all",n),e.off(null,n),e.trigger("x y")})})